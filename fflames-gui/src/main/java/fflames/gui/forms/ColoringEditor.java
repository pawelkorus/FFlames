/*
 * ColoringEditor.java
 *
 * Created on March 21, 2008, 2:25 AM
 */
package fflames.gui.forms;

import fflames.gui.model.ColorsModel;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Pawel Korus
 */
public class ColoringEditor extends JPanel {
	private static final long serialVersionUID = -1766888684765540914L;
	private final JList<String> _list;
	private final JPanel _buttonsPanel;
	private final ModelListener _listener;
	private ColorsModel _model;

	/**
	 * Creates new form ColouringEditor
	 */
	public ColoringEditor() {
		setLayout(new BoxLayout(this, BoxLayout.X_AXIS));

		_listener = new ModelListener();
		
		JPanel panel = new JPanel();
		panel.setAlignmentY(Component.TOP_ALIGNMENT);
		panel.setAlignmentX(Component.LEFT_ALIGNMENT);
		panel.setBorder(null);
		add(panel);
		panel.setLayout(new BorderLayout(0, 0));

		_list = new JList<>(new String[]{
			"Black & White", "Linear Black & White", 
			"Log Black & White", "Simple RGB", "Linear RGB", "Log RGB"});
		_list.setAlignmentY(Component.TOP_ALIGNMENT);
		_list.setAlignmentX(Component.LEFT_ALIGNMENT);
		_list.setLayoutOrientation(JList.VERTICAL_WRAP);
		_list.setVisibleRowCount(20);
		_list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		_list.setBorder(null);
		panel.add(_list);

		_buttonsPanel = new JPanel();
		_buttonsPanel.setAlignmentX(Component.RIGHT_ALIGNMENT);
		_buttonsPanel.setAlignmentY(Component.TOP_ALIGNMENT);
		add(_buttonsPanel);
		_buttonsPanel.setLayout(new BoxLayout(_buttonsPanel, BoxLayout.Y_AXIS));
		
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
	}// </editor-fold>//GEN-END:initComponents

	public void addListSelectionListener(ListSelectionListener listener) {
		_list.getSelectionModel().addListSelectionListener(listener);
	}

	public void removeListSelectionListener(ListSelectionListener listener) {
		_list.getSelectionModel().removeListSelectionListener(listener);
	}
	
	public ColorsModel getModel() {
		return _model;
	}
	
	public void setModel(ColorsModel m) {
		if(_model != null) {
			_model.removeListDataListener(_listener);
		}
		_model = m;
		_model.addListDataListener(_listener);
	} 
	
	protected JButton createChooseColorButton() {
		JButton btn = new JButton("Choose color");
		btn.addActionListener(new ChooseColorButtonActionListener());
		return btn;
	}
	
	private class ChooseColorButtonActionListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			JButton source = (JButton)e.getSource();
			Color color = JColorChooser.showDialog(null, "Choose color", null);
			float[] colorComponents = {0,0,0};
			color.getColorComponents(colorComponents);
			
			int index = -1;
			for(Component c : _buttonsPanel.getComponents()) {
				index++;
				if(c == source) {
					_model.setElementAt(index, colorComponents);
				}
			}
		}
		
	}
	
	private class ModelListener implements ListDataListener {

		@Override
		public void intervalAdded(ListDataEvent e) {
			for(int i = e.getIndex0(); i <= e.getIndex1(); i++) {
				_buttonsPanel.add(createChooseColorButton(), i);
				validate();
			}
		}

		@Override
		public void intervalRemoved(ListDataEvent e) {
			for(int i = e.getIndex1(); i >= e.getIndex0(); i--) {
				if(i >= 0 && i < _buttonsPanel.getComponentCount()) {
					_buttonsPanel.remove(i);
				}
			}
			validate();
		}

		@Override
		public void contentsChanged(ListDataEvent e) {
			ColorsModel source = (ColorsModel)e.getSource();
			
			for(int i = e.getIndex0(); i <= e.getIndex1(); i++) {
				float[] components = source.getElementAt(i);
				Color color = new Color(
						components[0], components[1], components[2]);
				
				_buttonsPanel.getComponent(i).setBackground(color);
				validate();
			}
		}
		
	}
}
